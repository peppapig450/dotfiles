{{ $aliases := (include (joinPath .chezmoi.sourceDir "dot_config/zsh/aliases/alias-descriptions.json") | fromJson) }}

{{- /*
Build an associative array whose keys are every alias/function
defined in alias-definitions.json, pointing to the file that
contains them.
*/ -}}
# -----------------------------------------------------------------------------
# WARNING: This _LAZY_ALIAS_FILES array is generated by Chezmoi from
# alias-descriptions.json. Do not edit this file directly.
# -----------------------------------------------------------------------------
typeset -A _LAZY_ALIAS_FILES=(
  {{- range $fileName, $cmdMap := $aliases }}
    {{- range $cmdName, $_ := $cmdMap }}
      {{ printf "%-10s" $cmdName }} "{{ env "ZDOTDIR" }}/aliases/{{ $fileName }}"
    {{- end}}
  {{- end}}
)

# TODO: figure out how to get the logic out of the eval block
# into a function, I can't figure out the quoting for rn.

# Loop over the map and create a stub for each name.
for _name _file in ${(kv)_LAZY_ALIAS_FILES}; do
  # Create the function stub
  eval "
    $_name() {
      # Save current alias keys
      local old_aliases=(\${(k)aliases})

      # Source new aliases
      source ${_file:q}

      # Get updated alias keys
      local alias_keys=(\${(k)aliases})

      # Find just the new aliases defined by the sourced file
      local new_aliases=(\${alias_keys:|old_aliases})

      # Remove all the new aliases EXCEPT this function's name (if present)
      unalias \${(*)new_aliases:#$_name}

      # Remove this function from the shell after it's run once
      builtin unfunction ${_name:q}

      # Call the function as an alias with all original args
      eval ${_name:q} \"\$@\"
    }
  "
done
